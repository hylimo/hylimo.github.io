const Z="ENTRIES",Q="KEYS",B="VALUES";class E{constructor(t,e){const s=t._tree,n=Array.from(s.keys());this.set=t,this._type=e,this._path=n.length>0?[{node:s,keys:n}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:e}=y(this._path);if(y(e)==="")return{done:!1,value:this.result()};const s=t.get(y(e));return this._path.push({node:s,keys:Array.from(s.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=y(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>y(t)).filter(t=>t!=="").join("")}value(){return y(this._path).node.get("")}result(){switch(this._type){case B:return this.value();case Q:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const y=i=>i[i.length-1],H=(i,t,e)=>{const s=new Map;if(t===void 0)return s;const n=t.length+1,o=n+e,r=new Uint8Array(o*n).fill(e+1);for(let c=0;c<n;++c)r[c]=c;for(let c=1;c<o;++c)r[c*n]=c;return U(i,t,e,s,r,1,n,""),s},U=(i,t,e,s,n,o,r,c)=>{const d=o*r;t:for(const u of i.keys())if(u===""){const h=n[d-1];h<=e&&s.set(c,[i.get(u),h])}else{let h=o;for(let l=0;l<u.length;++l,++h){const a=u[l],f=r*h,_=f-r;let g=n[f];const m=Math.max(0,h-e-1),p=Math.min(r-1,h+e);for(let w=m;w<p;++w){const M=a!==t[w],k=n[_+w]+ +M,x=n[_+w+1]+1,z=n[f+w]+1,I=n[f+w+1]=Math.min(k,x,z);I<g&&(g=I)}if(g>e)continue t}U(i.get(u),t,e,s,n,h,r,c+u)}};class F{constructor(t=new Map,e=""){this._size=void 0,this._tree=t,this._prefix=e}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[e,s]=L(this._tree,t.slice(this._prefix.length));if(e===void 0){const[n,o]=N(s);for(const r of n.keys())if(r!==""&&r.startsWith(o)){const c=new Map;return c.set(r.slice(o.length),n.get(r)),new F(c,t)}}return new F(e,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,X(this._tree,t)}entries(){return new E(this,Z)}forEach(t){for(const[e,s]of this)t(e,s,this)}fuzzyGet(t,e){return H(this._tree,t,e)}get(t){const e=T(this._tree,t);return e!==void 0?e.get(""):void 0}has(t){const e=T(this._tree,t);return e!==void 0&&e.has("")}keys(){return new E(this,Q)}set(t,e){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,V(this._tree,t).set("",e),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,e){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const s=V(this._tree,t);return s.set("",e(s.get(""))),this}fetch(t,e){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const s=V(this._tree,t);let n=s.get("");return n===void 0&&s.set("",n=e()),n}values(){return new E(this,B)}[Symbol.iterator](){return this.entries()}static from(t){const e=new F;for(const[s,n]of t)e.set(s,n);return e}static fromObject(t){return F.from(Object.entries(t))}}const L=(i,t,e=[])=>{if(t.length===0||i==null)return[i,e];for(const s of i.keys())if(s!==""&&t.startsWith(s))return e.push([i,s]),L(i.get(s),t.slice(s.length),e);return e.push([i,t]),L(void 0,"",e)},T=(i,t)=>{if(t.length===0||i==null)return i;for(const e of i.keys())if(e!==""&&t.startsWith(e))return T(i.get(e),t.slice(e.length))},V=(i,t)=>{const e=t.length;t:for(let s=0;i&&s<e;){for(const o of i.keys())if(o!==""&&t[s]===o[0]){const r=Math.min(e-s,o.length);let c=1;for(;c<r&&t[s+c]===o[c];)++c;const d=i.get(o);if(c===o.length)i=d;else{const u=new Map;u.set(o.slice(c),d),i.set(t.slice(s,s+c),u),i.delete(o),i=u}s+=c;continue t}const n=new Map;return i.set(t.slice(s),n),n}return i},X=(i,t)=>{const[e,s]=L(i,t);if(e!==void 0){if(e.delete(""),e.size===0)q(s);else if(e.size===1){const[n,o]=e.entries().next().value;K(s,n,o)}}},q=i=>{if(i.length===0)return;const[t,e]=N(i);if(t.delete(e),t.size===0)q(i.slice(0,-1));else if(t.size===1){const[s,n]=t.entries().next().value;s!==""&&K(i.slice(0,-1),s,n)}},K=(i,t,e)=>{if(i.length===0)return;const[s,n]=N(i);s.set(n+t,e),s.delete(n)},N=i=>i[i.length-1],W="or",G="and",tt="and_not";class S{constructor(t){if(t?.fields==null)throw new Error('MiniSearch: option "fields" must be provided');const e=t.autoVacuum==null||t.autoVacuum===!0?A:t.autoVacuum;this._options={...O,...t,autoVacuum:e,searchOptions:{...P,...t.searchOptions||{}},autoSuggestOptions:{...ot,...t.autoSuggestOptions||{}}},this._index=new F,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=j,this.addFields(this._options.fields)}add(t){const{extractField:e,stringifyField:s,tokenize:n,processTerm:o,fields:r,idField:c}=this._options,d=e(t,c);if(d==null)throw new Error(`MiniSearch: document does not have ID field "${c}"`);if(this._idToShortId.has(d))throw new Error(`MiniSearch: duplicate ID ${d}`);const u=this.addDocumentId(d);this.saveStoredFields(u,t);for(const h of r){const l=e(t,h);if(l==null)continue;const a=n(s(l,h),h),f=this._fieldIds[h],_=new Set(a).size;this.addFieldLength(u,f,this._documentCount-1,_);for(const g of a){const m=o(g,h);if(Array.isArray(m))for(const p of m)this.addTerm(f,u,p);else m&&this.addTerm(f,u,m)}}}addAll(t){for(const e of t)this.add(e)}addAllAsync(t,e={}){const{chunkSize:s=10}=e,n={chunk:[],promise:Promise.resolve()},{chunk:o,promise:r}=t.reduce(({chunk:c,promise:d},u,h)=>(c.push(u),(h+1)%s===0?{chunk:[],promise:d.then(()=>new Promise(l=>setTimeout(l,0))).then(()=>this.addAll(c))}:{chunk:c,promise:d}),n);return r.then(()=>this.addAll(o))}remove(t){const{tokenize:e,processTerm:s,extractField:n,stringifyField:o,fields:r,idField:c}=this._options,d=n(t,c);if(d==null)throw new Error(`MiniSearch: document does not have ID field "${c}"`);const u=this._idToShortId.get(d);if(u==null)throw new Error(`MiniSearch: cannot remove document with ID ${d}: it is not in the index`);for(const h of r){const l=n(t,h);if(l==null)continue;const a=e(o(l,h),h),f=this._fieldIds[h],_=new Set(a).size;this.removeFieldLength(u,f,this._documentCount,_);for(const g of a){const m=s(g,h);if(Array.isArray(m))for(const p of m)this.removeTerm(f,u,p);else m&&this.removeTerm(f,u,m)}}this._storedFields.delete(u),this._documentIds.delete(u),this._idToShortId.delete(d),this._fieldLength.delete(u),this._documentCount-=1}removeAll(t){if(t)for(const e of t)this.remove(e);else{if(arguments.length>0)throw new Error("Expected documents to be present. Omit the argument to remove all documents.");this._index=new F,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldLength=new Map,this._avgFieldLength=[],this._storedFields=new Map,this._nextId=0}}discard(t){const e=this._idToShortId.get(t);if(e==null)throw new Error(`MiniSearch: cannot discard document with ID ${t}: it is not in the index`);this._idToShortId.delete(t),this._documentIds.delete(e),this._storedFields.delete(e),(this._fieldLength.get(e)||[]).forEach((s,n)=>{this.removeFieldLength(e,n,this._documentCount,s)}),this._fieldLength.delete(e),this._documentCount-=1,this._dirtCount+=1,this.maybeAutoVacuum()}maybeAutoVacuum(){if(this._options.autoVacuum===!1)return;const{minDirtFactor:t,minDirtCount:e,batchSize:s,batchWait:n}=this._options.autoVacuum;this.conditionalVacuum({batchSize:s,batchWait:n},{minDirtCount:e,minDirtFactor:t})}discardAll(t){const e=this._options.autoVacuum;try{this._options.autoVacuum=!1;for(const s of t)this.discard(s)}finally{this._options.autoVacuum=e}this.maybeAutoVacuum()}replace(t){const{idField:e,extractField:s}=this._options,n=s(t,e);this.discard(n),this.add(t)}vacuum(t={}){return this.conditionalVacuum(t)}conditionalVacuum(t,e){return this._currentVacuum?(this._enqueuedVacuumConditions=this._enqueuedVacuumConditions&&e,this._enqueuedVacuum!=null?this._enqueuedVacuum:(this._enqueuedVacuum=this._currentVacuum.then(()=>{const s=this._enqueuedVacuumConditions;return this._enqueuedVacuumConditions=j,this.performVacuuming(t,s)}),this._enqueuedVacuum)):this.vacuumConditionsMet(e)===!1?Promise.resolve():(this._currentVacuum=this.performVacuuming(t),this._currentVacuum)}async performVacuuming(t,e){const s=this._dirtCount;if(this.vacuumConditionsMet(e)){const n=t.batchSize||D.batchSize,o=t.batchWait||D.batchWait;let r=1;for(const[c,d]of this._index){for(const[u,h]of d)for(const[l]of h)this._documentIds.has(l)||(h.size<=1?d.delete(u):h.delete(l));this._index.get(c).size===0&&this._index.delete(c),r%n===0&&await new Promise(u=>setTimeout(u,o)),r+=1}this._dirtCount-=s}await null,this._currentVacuum=this._enqueuedVacuum,this._enqueuedVacuum=null}vacuumConditionsMet(t){if(t==null)return!0;let{minDirtCount:e,minDirtFactor:s}=t;return e=e||A.minDirtCount,s=s||A.minDirtFactor,this.dirtCount>=e&&this.dirtFactor>=s}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}has(t){return this._idToShortId.has(t)}getStoredFields(t){const e=this._idToShortId.get(t);if(e!=null)return this._storedFields.get(e)}search(t,e={}){const{searchOptions:s}=this._options,n={...s,...e},o=this.executeQuery(t,e),r=[];for(const[c,{score:d,terms:u,match:h}]of o){const l=u.length||1,a={id:this._documentIds.get(c),score:d*l,terms:Object.keys(h),queryTerms:u,match:h};Object.assign(a,this._storedFields.get(c)),(n.filter==null||n.filter(a))&&r.push(a)}return t===S.wildcard&&n.boostDocument==null||r.sort(J),r}autoSuggest(t,e={}){e={...this._options.autoSuggestOptions,...e};const s=new Map;for(const{score:o,terms:r}of this.search(t,e)){const c=r.join(" "),d=s.get(c);d!=null?(d.score+=o,d.count+=1):s.set(c,{score:o,terms:r,count:1})}const n=[];for(const[o,{score:r,terms:c,count:d}]of s)n.push({suggestion:o,terms:c,score:r/d});return n.sort(J),n}get documentCount(){return this._documentCount}get termCount(){return this._index.size}static loadJSON(t,e){if(e==null)throw new Error("MiniSearch: loadJSON should be given the same options used when serializing the index");return this.loadJS(JSON.parse(t),e)}static async loadJSONAsync(t,e){if(e==null)throw new Error("MiniSearch: loadJSON should be given the same options used when serializing the index");return this.loadJSAsync(JSON.parse(t),e)}static getDefault(t){if(O.hasOwnProperty(t))return C(O,t);throw new Error(`MiniSearch: unknown option "${t}"`)}static loadJS(t,e){const{index:s,documentIds:n,fieldLength:o,storedFields:r,serializationVersion:c}=t,d=this.instantiateMiniSearch(t,e);d._documentIds=v(n),d._fieldLength=v(o),d._storedFields=v(r);for(const[u,h]of d._documentIds)d._idToShortId.set(h,u);for(const[u,h]of s){const l=new Map;for(const a of Object.keys(h)){let f=h[a];c===1&&(f=f.ds),l.set(parseInt(a,10),v(f))}d._index.set(u,l)}return d}static async loadJSAsync(t,e){const{index:s,documentIds:n,fieldLength:o,storedFields:r,serializationVersion:c}=t,d=this.instantiateMiniSearch(t,e);d._documentIds=await b(n),d._fieldLength=await b(o),d._storedFields=await b(r);for(const[h,l]of d._documentIds)d._idToShortId.set(l,h);let u=0;for(const[h,l]of s){const a=new Map;for(const f of Object.keys(l)){let _=l[f];c===1&&(_=_.ds),a.set(parseInt(f,10),await b(_))}++u%1e3===0&&await Y(0),d._index.set(h,a)}return d}static instantiateMiniSearch(t,e){const{documentCount:s,nextId:n,fieldIds:o,averageFieldLength:r,dirtCount:c,serializationVersion:d}=t;if(d!==1&&d!==2)throw new Error("MiniSearch: cannot deserialize an index created with an incompatible version");const u=new S(e);return u._documentCount=s,u._nextId=n,u._idToShortId=new Map,u._fieldIds=o,u._avgFieldLength=r,u._dirtCount=c||0,u._index=new F,u}executeQuery(t,e={}){if(t===S.wildcard)return this.executeWildcardQuery(e);if(typeof t!="string"){const a={...e,...t,queries:void 0},f=t.queries.map(_=>this.executeQuery(_,a));return this.combineResults(f,a.combineWith)}const{tokenize:s,processTerm:n,searchOptions:o}=this._options,r={tokenize:s,processTerm:n,...o,...e},{tokenize:c,processTerm:d}=r,l=c(t).flatMap(a=>d(a)).filter(a=>!!a).map(it(r)).map(a=>this.executeQuerySpec(a,r));return this.combineResults(l,r.combineWith)}executeQuerySpec(t,e){const s={...this._options.searchOptions,...e},n=(s.fields||this._options.fields).reduce((g,m)=>({...g,[m]:C(s.boost,m)||1}),{}),{boostDocument:o,weights:r,maxFuzzy:c,bm25:d}=s,{fuzzy:u,prefix:h}={...P.weights,...r},l=this._index.get(t.term),a=this.termResults(t.term,t.term,1,t.termBoost,l,n,o,d);let f,_;if(t.prefix&&(f=this._index.atPrefix(t.term)),t.fuzzy){const g=t.fuzzy===!0?.2:t.fuzzy,m=g<1?Math.min(c,Math.round(t.term.length*g)):g;m&&(_=this._index.fuzzyGet(t.term,m))}if(f)for(const[g,m]of f){const p=g.length-t.term.length;if(!p)continue;_?.delete(g);const w=h*g.length/(g.length+.3*p);this.termResults(t.term,g,w,t.termBoost,m,n,o,d,a)}if(_)for(const g of _.keys()){const[m,p]=_.get(g);if(!p)continue;const w=u*g.length/(g.length+p);this.termResults(t.term,g,w,t.termBoost,m,n,o,d,a)}return a}executeWildcardQuery(t){const e=new Map,s={...this._options.searchOptions,...t};for(const[n,o]of this._documentIds){const r=s.boostDocument?s.boostDocument(o,"",this._storedFields.get(n)):1;e.set(n,{score:r,terms:[],match:{}})}return e}combineResults(t,e=W){if(t.length===0)return new Map;const s=e.toLowerCase(),n=et[s];if(!n)throw new Error(`Invalid combination operator: ${e}`);return t.reduce(n)||new Map}toJSON(){const t=[];for(const[e,s]of this._index){const n={};for(const[o,r]of s)n[o]=Object.fromEntries(r);t.push([e,n])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}termResults(t,e,s,n,o,r,c,d,u=new Map){if(o==null)return u;for(const h of Object.keys(r)){const l=r[h],a=this._fieldIds[h],f=o.get(a);if(f==null)continue;let _=f.size;const g=this._avgFieldLength[a];for(const m of f.keys()){if(!this._documentIds.has(m)){this.removeTerm(a,m,e),_-=1;continue}const p=c?c(this._documentIds.get(m),e,this._storedFields.get(m)):1;if(!p)continue;const w=f.get(m),M=this._fieldLength.get(m)[a],k=nt(w,_,this._documentCount,M,g,d),x=s*n*l*p*k,z=u.get(m);if(z){z.score+=x,rt(z.terms,t);const I=C(z.match,e);I?I.push(h):z.match[e]=[h]}else u.set(m,{score:x,terms:[t],match:{[e]:[h]}})}}return u}addTerm(t,e,s){const n=this._index.fetch(s,$);let o=n.get(t);if(o==null)o=new Map,o.set(e,1),n.set(t,o);else{const r=o.get(e);o.set(e,(r||0)+1)}}removeTerm(t,e,s){if(!this._index.has(s)){this.warnDocumentChanged(e,t,s);return}const n=this._index.fetch(s,$),o=n.get(t);o==null||o.get(e)==null?this.warnDocumentChanged(e,t,s):o.get(e)<=1?o.size<=1?n.delete(t):o.delete(e):o.set(e,o.get(e)-1),this._index.get(s).size===0&&this._index.delete(s)}warnDocumentChanged(t,e,s){for(const n of Object.keys(this._fieldIds))if(this._fieldIds[n]===e){this._options.logger("warn",`MiniSearch: document with ID ${this._documentIds.get(t)} has changed before removal: term "${s}" was not present in field "${n}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}}addDocumentId(t){const e=this._nextId;return this._idToShortId.set(t,e),this._documentIds.set(e,t),this._documentCount+=1,this._nextId+=1,e}addFields(t){for(let e=0;e<t.length;e++)this._fieldIds[t[e]]=e}addFieldLength(t,e,s,n){let o=this._fieldLength.get(t);o==null&&this._fieldLength.set(t,o=[]),o[e]=n;const c=(this._avgFieldLength[e]||0)*s+n;this._avgFieldLength[e]=c/(s+1)}removeFieldLength(t,e,s,n){if(s===1){this._avgFieldLength[e]=0;return}const o=this._avgFieldLength[e]*s-n;this._avgFieldLength[e]=o/(s-1)}saveStoredFields(t,e){const{storeFields:s,extractField:n}=this._options;if(s==null||s.length===0)return;let o=this._storedFields.get(t);o==null&&this._storedFields.set(t,o={});for(const r of s){const c=n(e,r);c!==void 0&&(o[r]=c)}}}S.wildcard=Symbol("*");const C=(i,t)=>Object.prototype.hasOwnProperty.call(i,t)?i[t]:void 0,et={[W]:(i,t)=>{for(const e of t.keys()){const s=i.get(e);if(s==null)i.set(e,t.get(e));else{const{score:n,terms:o,match:r}=t.get(e);s.score=s.score+n,s.match=Object.assign(s.match,r),R(s.terms,o)}}return i},[G]:(i,t)=>{const e=new Map;for(const s of t.keys()){const n=i.get(s);if(n==null)continue;const{score:o,terms:r,match:c}=t.get(s);R(n.terms,r),e.set(s,{score:n.score+o,terms:n.terms,match:Object.assign(n.match,c)})}return e},[tt]:(i,t)=>{for(const e of t.keys())i.delete(e);return i}},st={k:1.2,b:.7,d:.5},nt=(i,t,e,s,n,o)=>{const{k:r,b:c,d}=o;return Math.log(1+(e-t+.5)/(t+.5))*(d+i*(r+1)/(i+r*(1-c+c*s/n)))},it=i=>(t,e,s)=>{const n=typeof i.fuzzy=="function"?i.fuzzy(t,e,s):i.fuzzy||!1,o=typeof i.prefix=="function"?i.prefix(t,e,s):i.prefix===!0,r=typeof i.boostTerm=="function"?i.boostTerm(t,e,s):1;return{term:t,fuzzy:n,prefix:o,termBoost:r}},O={idField:"id",extractField:(i,t)=>i[t],stringifyField:(i,t)=>i.toString(),tokenize:i=>i.split(ct),processTerm:i=>i.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(i,t)=>{typeof console?.[i]=="function"&&console[i](t)},autoVacuum:!0},P={combineWith:W,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:st},ot={combineWith:G,prefix:(i,t,e)=>t===e.length-1},D={batchSize:1e3,batchWait:10},j={minDirtFactor:.1,minDirtCount:20},A={...D,...j},rt=(i,t)=>{i.includes(t)||i.push(t)},R=(i,t)=>{for(const e of t)i.includes(e)||i.push(e)},J=({score:i},{score:t})=>t-i,$=()=>new Map,v=i=>{const t=new Map;for(const e of Object.keys(i))t.set(parseInt(e,10),i[e]);return t},b=async i=>{const t=new Map;let e=0;for(const s of Object.keys(i))t.set(parseInt(s,10),i[s]),++e%1e3===0&&await Y(0);return t},Y=i=>new Promise(t=>setTimeout(t,i)),ct=/[\n\r\p{Z}\p{P}]+/u;export{S as M};
