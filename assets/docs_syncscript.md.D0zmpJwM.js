import{_ as a,c as e,o as n,ay as i}from"./chunks/framework.CDajJPzx.js";const u=JSON.parse('{"title":"SyncScript","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/syncscript.md","filePath":"docs/syncscript.md"}'),t={name:"docs/syncscript.md"};function l(o,s,p,c,r,d){return n(),e("div",null,[...s[0]||(s[0]=[i(`<h1 id="syncscript" tabindex="-1">SyncScript <a class="header-anchor" href="#syncscript" aria-label="Permalink to “SyncScript”">​</a></h1><p>SyncScript is a general-purpose programming language with focus on flexibility and implementing internal DSLs. Characteristings:</p><ul><li>Dynamic typing</li><li>Strong typing</li><li>Static/lexical scoping</li><li>Prototype-based object system</li></ul><p>Main data types available are</p><ul><li>object</li><li>string</li><li>number</li><li>boolean</li><li>function</li><li>null</li></ul><h2 id="syntax" tabindex="-1">Syntax <a class="header-anchor" href="#syntax" aria-label="Permalink to “Syntax”">​</a></h2><p>The syntax of SyncScript focuses on flexibility for implementing DSLs. It is inspired by JavaScript, Kotlin and Scala. Following, we introduce the main syntactic constructs:</p><h3 id="literals" tabindex="-1">Literals <a class="header-anchor" href="#literals" aria-label="Permalink to “Literals”">​</a></h3><p>Literals, including number and string literals are written as in JavaScript:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>1</span></span>
<span class="line"><span>3.14</span></span>
<span class="line"><span>&quot;Hello World&quot;</span></span></code></pre></div><h3 id="comments" tabindex="-1">Comments <a class="header-anchor" href="#comments" aria-label="Permalink to “Comments”">​</a></h3><p>Similar, C-Style comments are supported:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>// This is a line-end comment</span></span>
<span class="line"><span>/* This is a block comment */</span></span></code></pre></div><h3 id="identifiers" tabindex="-1">Identifiers <a class="header-anchor" href="#identifiers" aria-label="Permalink to “Identifiers”">​</a></h3><p>SyncScript uses no keywords, including operator support. Thus, identifiers are the most important tokens. Two types of identifiers exist: alphanumeric identifiers and symbolic identifiers. Alphanumeric identifiers can contain letters, digits, the underscore and the dollar sign. Examples include:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>test</span></span>
<span class="line"><span>test2</span></span>
<span class="line"><span>hello_world</span></span>
<span class="line"><span>$variable</span></span></code></pre></div><p>Symbolic identifiers are sequences of symbols. Supported symbols are: <code>!#%&amp;*+-/:&lt;=&gt;?@^|~.</code>. Note that some limitations exist: first, a single equal sign is not allowed. Next, dots are only supported when using at least two consecutive dots. Examples include:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>+</span></span>
<span class="line"><span>==</span></span>
<span class="line"><span>!=</span></span>
<span class="line"><span>...</span></span></code></pre></div><p>Also, underscores and dollar signs are allowed in symbolic identifiers, however, they <strong>must not</strong> be followed by an alphanumerical character. Examples include:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>// allowed</span></span>
<span class="line"><span>__&gt;</span></span>
<span class="line"><span>// not allowed</span></span>
<span class="line"><span>-_test</span></span></code></pre></div><h3 id="field-access" tabindex="-1">Field Access <a class="header-anchor" href="#field-access" aria-label="Permalink to “Field Access”">​</a></h3><p>To access fields, the dot operator is used:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>hello.world</span></span></code></pre></div><p>To assign values to fields, the assignment operator is used:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>theAnswer = 42</span></span></code></pre></div><p>The assignment operator can also be used to assign values to fields of objects:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>hello.world = &quot;Hello World&quot;</span></span></code></pre></div><h3 id="functions-function-calls" tabindex="-1">Functions &amp; Function Calls <a class="header-anchor" href="#functions-function-calls" aria-label="Permalink to “Functions &amp; Function Calls”">​</a></h3><p>Functions are created by placing expressions into curly braces:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>testFunction = {</span></span>
<span class="line"><span>    // body of the function</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>Functions always evaluate to their last inner value</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>testFunction = {</span></span>
<span class="line"><span>    1</span></span>
<span class="line"><span>    2</span></span>
<span class="line"><span>    3 // the return value of the function</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>To invoke a function, one uses the call-operator:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>testFunction()</span></span></code></pre></div><p>Similar to JavaScript, arguments can be provided to the call-operator by placing them in parentheses:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>testFunction(1, 2, 3)</span></span></code></pre></div><p>Furthermore, like Kotlin, named arguments are supported:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>testFunction(a = 1, b = 2, c = 3)</span></span></code></pre></div><p>Arguments are provided to the function as a single object under the name <code>args</code>:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>createPoint = {</span></span>
<span class="line"><span>    x = args.x</span></span>
<span class="line"><span>    y = args.y</span></span>
<span class="line"><span>    // TODO</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>The first index-based argument cal also be accessed under the name <code>it</code>:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>printWrapper = {</span></span>
<span class="line"><span>    println(it)</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>To access further index-based arguments, the destructuring expression can be used:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>printWrapper = {</span></span>
<span class="line"><span>    (a, b, c) = args</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>printWrapper(1, 2, 3)</span></span></code></pre></div><p>The current scope is available under the name <code>this</code> and is always an object:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>println(this.x)</span></span></code></pre></div><p>When calling a function using a field access expression, the object on which function is called is available under the name <code>self</code>. If a variable is called instead, the current scope is provided as <code>self</code>. Similar to Kotlin, to support higher-order functions, the trailing-lambda syntax can be used when providing a function as the last argument:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>testFunction(&quot;test&quot;) {</span></span>
<span class="line"><span>    // body of the function</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>// is equivalent to</span></span>
<span class="line"><span>testFunction(&quot;test&quot;, {</span></span>
<span class="line"><span>    // body of the function</span></span>
<span class="line"><span>})</span></span></code></pre></div><p>Note that unlike Kotlin, multiple trailing lambdas can be used</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>if(condition) {</span></span>
<span class="line"><span>    // if branch</span></span>
<span class="line"><span>} {</span></span>
<span class="line"><span>    // else branch</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>// is equivalent to</span></span>
<span class="line"><span>if(condition, {</span></span>
<span class="line"><span>    // if branch</span></span>
<span class="line"><span>}, {</span></span>
<span class="line"><span>    // else branch</span></span>
<span class="line"><span>})</span></span></code></pre></div><h3 id="operators" tabindex="-1">Operators <a class="header-anchor" href="#operators" aria-label="Permalink to “Operators”">​</a></h3><p>Syntactically, an oprator is an identifier. At runtime, operators are resolved to functions. For more flexibility, field access expressions are also supported as operators:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>a + b</span></span>
<span class="line"><span>// is equivalent to</span></span>
<span class="line"><span>+(a, b)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// field access as operator</span></span>
<span class="line"><span>a this.+ b</span></span></code></pre></div><p>As SyncScript differentiates between alphanumerical and symbolic identifiers, in many cases, separating the operator from the operands is not necessary.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>a+b</span></span>
<span class="line"><span>// is equivalent to</span></span>
<span class="line"><span>a + b</span></span></code></pre></div><p>For flexibility and a good user experience, operators are usually called on the left-hand side operand:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>+ = {</span></span>
<span class="line"><span>    (left, right) = args</span></span>
<span class="line"><span>    left.+(right)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// thus, the following are equivalent with this implementation:</span></span>
<span class="line"><span>a + b</span></span>
<span class="line"><span>+(a, b)</span></span>
<span class="line"><span>a.+(b)</span></span></code></pre></div><h3 id="object-literals" tabindex="-1">Object Literals <a class="header-anchor" href="#object-literals" aria-label="Permalink to “Object Literals”">​</a></h3><p>Objects can be created using square brackets:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>point = [</span></span>
<span class="line"><span>    x = 1</span></span>
<span class="line"><span>    y = 2</span></span>
<span class="line"><span>]</span></span></code></pre></div><p>Similar to how function arguments work, entries without an identifier are assigned to an appropriate index:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>test = [</span></span>
<span class="line"><span>    0, // index 0</span></span>
<span class="line"><span>    x = 1</span></span>
<span class="line"><span>    2, // index 1</span></span>
<span class="line"><span>    y = 3</span></span>
<span class="line"><span>    4 // index 2</span></span>
<span class="line"><span>]</span></span></code></pre></div><h3 id="brackets" tabindex="-1">Brackets <a class="header-anchor" href="#brackets" aria-label="Permalink to “Brackets”">​</a></h3><p>As SyncScript uses functions for operators, no operator priority is defined. Instead, all expressions are evaluated left to right. To group expressions, brackets can be used:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>a + b * c</span></span>
<span class="line"><span>// is equivalent to</span></span>
<span class="line"><span>(a + b) * c</span></span>
<span class="line"><span>// to achive the expected result, use brackets:</span></span>
<span class="line"><span>a + (b * c)</span></span></code></pre></div><h2 id="data-types" tabindex="-1">Data Types <a class="header-anchor" href="#data-types" aria-label="Permalink to “Data Types”">​</a></h2><p>Following, we go over the supported functionality for all basic data types.</p><h3 id="supported-operators" tabindex="-1">Supported operators <a class="header-anchor" href="#supported-operators" aria-label="Permalink to “Supported operators”">​</a></h3><h4 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to “String”">​</a></h4><ul><li>Comparison: <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code></li><li>Concatenation: <code>+</code> (also works if one operand is not a string)</li></ul><h4 id="number" tabindex="-1">Number <a class="header-anchor" href="#number" aria-label="Permalink to “Number”">​</a></h4><ul><li>Comparison: <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code></li><li>Arithmetic: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code> (modulo)</li></ul><h4 id="boolean" tabindex="-1">Boolean <a class="header-anchor" href="#boolean" aria-label="Permalink to “Boolean”">​</a></h4><ul><li>Comparison: <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code></li><li>Logical: <code>&amp;&amp;</code>, <code>||</code> (short circuiting)</li></ul><h4 id="object" tabindex="-1">Object <a class="header-anchor" href="#object" aria-label="Permalink to “Object”">​</a></h4><ul><li>Comparison: <code>==</code>, <code>!=</code></li></ul><h4 id="null" tabindex="-1">Null <a class="header-anchor" href="#null" aria-label="Permalink to “Null”">​</a></h4><ul><li>Comparison: <code>==</code>, <code>!=</code></li></ul><h3 id="other-functionality" tabindex="-1">Other functionality <a class="header-anchor" href="#other-functionality" aria-label="Permalink to “Other functionality”">​</a></h3><h4 id="object-functions" tabindex="-1">Object functions <a class="header-anchor" href="#object-functions" aria-label="Permalink to “Object functions”">​</a></h4><ul><li><code>get</code>: retrieves a field from an object, takes the name of the field as an argument</li><li><code>rawGet</code>: similar to get, but does <strong>not</strong> consider the prototype chain</li><li><code>set</code>: sets a field on an object, takes the name of the field and the value as arguments</li><li><code>delete</code>: deletes a field from an object, takes the name of the field as an argument</li><li><code>forEach</code>: takes a function as argument and calls it for each field of the object, the function is called with the name of the field and the value of the field as arguments</li></ul><h4 id="function-functions" tabindex="-1">Function functions <a class="header-anchor" href="#function-functions" aria-label="Permalink to “Function functions”">​</a></h4><ul><li><code>callWithScope</code>: calls a function with a given scope, takes the scope and the arguments object as arguments. Useful for implementing DSL scope-like structures</li></ul><h2 id="global-functionality" tabindex="-1">Global functionality <a class="header-anchor" href="#global-functionality" aria-label="Permalink to “Global functionality”">​</a></h2><p>Global available functions, in particular control flow structures:</p><ul><li><code>if</code>: if-statement, takes the conditions and 1-2 functions as arguments. If the condition is true, the first function is called, otherwise the second function is called (if provided)</li><li><code>while</code>: while-loop, takes the condition and a function as arguments. As long as the condition is true, the function is called.</li><li><code>error</code>: throws an error, takes the error message as argument</li><li><code>Math</code>: object containing the mathematical functions <code>floor</code>, <code>ceil</code>, and <code>round</code></li><li><code>println</code>: prints the given arguments to the console, primarily used for debugging</li><li><code>!</code>: negates the given boolean value</li><li><code>-</code>: negates the given number value</li><li><code>noedit</code>: takes a locally-defined function as argument which is executed immediately, marks this function as non-editable from the interactive graphical editor.</li><li><code>range</code>: takes a number as argument and returns a list containing all numbers from 0 to the given number (exclusive)</li></ul><p>Global constants:</p><ul><li><code>null</code>: the null value</li><li><code>true</code>: the boolean value true</li><li><code>false</code>: the boolean value false</li></ul><h3 id="custom-data-types" tabindex="-1">Custom Data Types <a class="header-anchor" href="#custom-data-types" aria-label="Permalink to “Custom Data Types”">​</a></h3><h4 id="list" tabindex="-1">List <a class="header-anchor" href="#list" aria-label="Permalink to “List”">​</a></h4><p>To create a list, use the <code>list</code> function with any amount of index-based arguments. A list supports the following functions and fields, and operators:</p><ul><li><code>+</code> (operator): concatenates two lists</li><li><code>length</code> (field): the current length of the list, should not be modified</li><li><code>add</code>: adds the provided element to the end of the list</li><li><code>addAll</code>: adds all elements in the provided list to the list</li><li><code>remove</code>: removes and returns the last element of the list</li><li><code>forEach</code>: similar to object <code>forEach</code>, however only iterates over the index-based fields, thus over the list entries</li><li><code>map</code>: similar to forEach, but returns a new list containing the return values of the provided function</li></ul>`,92)])])}const g=a(t,[["render",l]]);export{u as __pageData,g as default};
