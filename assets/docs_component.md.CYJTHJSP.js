import{_ as s,I as i,c as d,o as c,ay as a,J as n,j as o,a as r}from"./chunks/framework.CDajJPzx.js";const b=JSON.parse('{"title":"UML Component Diagram","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/component.md","filePath":"docs/component.md"}'),l={name:"docs/component.md"};function p(m,e,h,A,u,f){const t=i("EmbeddedHylimoEditor");return c(),d("div",null,[e[0]||(e[0]=a(`<h1 id="uml-component-diagram" tabindex="-1">UML Component Diagram <a class="header-anchor" href="#uml-component-diagram" aria-label="Permalink to “UML Component Diagram”">​</a></h1><p>To create a UML component diagram, use the <code>componentDiagram</code> function with component elements:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>componentDiagram {</span></span>
<span class="line"><span>    // define elements</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="elements" tabindex="-1">Elements <a class="header-anchor" href="#elements" aria-label="Permalink to “Elements”">​</a></h2><h3 id="component" tabindex="-1"><code>component</code> <a class="header-anchor" href="#component" aria-label="Permalink to “component”">​</a></h3><p>Creates a new component element, supporting features similar to classes:</p>`,6)),n(t,{code:"componentDiagram%20%7B%0A%20%20%20%20component(%22MyComponent%22)%20%7B%0A%20%20%20%20%20%20%20%20public%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20property1%20%3A%20String%0A%20%20%20%20%20%20%20%20%20%20%20%20method1()%20%3A%20void%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20private%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20secretMethod()%20%3A%20int%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A"}),e[1]||(e[1]=a('<h4 id="class-features" tabindex="-1">Class Features <a class="header-anchor" href="#class-features" aria-label="Permalink to “Class Features”">​</a></h4><p>For details, see <a href="./class.html#class">UML Class Diagram</a></p><ul><li><strong>Properties and Methods:</strong> Define public, private, protected, package, or default sections for properties and methods, just like in class diagrams.</li><li><strong>Abstract &amp; Keywords:</strong> Use <code>abstract = true</code> to mark a component as abstract, and <code>keywords = list(&quot;stereotype&quot;)</code> to add stereotypes or keywords in guillemets (<code>« »</code>).</li></ul><h4 id="nesting" tabindex="-1">Nesting <a class="header-anchor" href="#nesting" aria-label="Permalink to “Nesting”">​</a></h4><p>Components can contain other components, classes, or interfaces, allowing for hierarchical organization:</p>',5)),n(t,{code:"componentDiagram%20%7B%0A%20%20%20%20component(%22Outer%22)%20%7B%0A%20%20%20%20%20%20%20%20component(%22Inner%22)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20...%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A"}),e[2]||(e[2]=o("h4",{id:"ports",tabindex:"-1"},[r("Ports "),o("a",{class:"header-anchor",href:"#ports","aria-label":"Permalink to “Ports”"},"​")],-1)),e[3]||(e[3]=o("p",null,"Components can have ports, which are connection points for interfaces or other elements. Ports can be defined inside the component block or using dot notation outside:",-1)),n(t,{code:"componentDiagram%20%7B%0A%20%20%20%20component(%22Comp%22)%20%7B%0A%20%20%20%20%20%20%20%20port()%0A%20%20%20%20%7D%0A%20%20%20%20Comp.port(0.5)%0A%7D%0A"}),e[4]||(e[4]=o("p",null,"Ports can also have interfaces (see below).",-1)),e[5]||(e[5]=o("h4",{id:"required-and-provided-interfaces",tabindex:"-1"},[r("Required and Provided Interfaces "),o("a",{class:"header-anchor",href:"#required-and-provided-interfaces","aria-label":"Permalink to “Required and Provided Interfaces”"},"​")],-1)),e[6]||(e[6]=o("p",null,[r("Components can declare required and provided interfaces using the "),o("code",null,"provides"),r(" and "),o("code",null,"requires"),r(" functions. These can be placed inside the component or attached to ports:")],-1)),n(t,{code:"componentDiagram%20%7B%0A%20%20%20%20component(%22Service%22)%20%7B%0A%20%20%20%20%20%20%20%20provides(%22REST%22)%0A%20%20%20%20%20%20%20%20requires(%22gRPC%22%2C%200.5)%0A%20%20%20%20%7D%0A%7D%0A"}),e[7]||(e[7]=a("<ul><li><strong>Syntax:</strong><ul><li><code>provides([name], pos, [target], dist = dist, namePos = [x, y])</code></li><li><code>requires(pos, [target])</code></li><li>All arguments are optional.</li><li><code>name</code> is the interface name (can be omitted).</li><li><code>pos</code> is the relative position on the component outline (0 = top, 0.5 = right, etc.).</li><li><code>target</code> can be used for directly connected notation.</li><li><code>dist</code> controls the distance of the interface symbol from the component.</li><li><code>namePos</code> can adjust the label position.</li></ul></li></ul><p>Example for directly connected notation:</p>",2)),n(t,{code:"componentDiagram%20%7B%0A%20%20%20%20component(%22Service%20A%22)%0A%0A%20%20%20%20component(%22Service%20B%22)%20layout%20%7B%0A%20%20%20%20%20%20%20%20pos%20%3D%20apos(0%2C%20250)%0A%20%20%20%20%7D%0A%0A%20%20%20%20%60Service%20B%60.provides(%22REST%22%2C%200.75%2C%20namePos%20%3D%20%5B52%2C%20-9%5D)%0A%0A%20%20%20%20%60Service%20A%60.requires(0.25%2C%20REST)%0A%7D%0A"}),e[8]||(e[8]=o("p",null,"Interfaces can also be attached to ports:",-1)),n(t,{code:"componentDiagram%20%7B%0A%20%20%20%20component(%22Comp%22)%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20inside%0A%20%20%20%20%20%20%20%20port(0.25).provides(%22API%22%2C%200.25)%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20or%20outside%0A%20%20%20%20Comp.port(0.75).requires(0.75)%0A%7D%0A"}),e[9]||(e[9]=a('<h3 id="connections-associations" tabindex="-1">Connections / Associations <a class="header-anchor" href="#connections-associations" aria-label="Permalink to “Connections / Associations”">​</a></h3><h4 id="dependson" tabindex="-1"><code>dependsOn</code> <a class="header-anchor" href="#dependson" aria-label="Permalink to “dependsOn”">​</a></h4><p>Instead of directly connecting a <code>required</code> to a <code>provided</code> interface, a <code>dependsOn</code>dashed arrow can be used:</p>',3)),n(t,{code:"componentDiagram%20%7B%0A%20%20%20%20component(%22Service%20A%22)%0A%0A%20%20%20%20component(%22Service%20B%22)%20layout%20%7B%0A%20%20%20%20%20%20%20%20pos%20%3D%20apos(0%2C%20350)%0A%20%20%20%20%7D%0A%0A%20%20%20%20%60Service%20B%60.provides(%22REST%22%2C%200.75%2C%20namePos%20%3D%20%5B52%2C%20-9%5D)%0A%0A%20%20%20%20required%20%3D%20%60Service%20A%60.requires(0.25)%0A%0A%20%20%20%20required%20dependsOn%20REST%0A%7D%0A"}),e[10]||(e[10]=a('<div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>This connection operator is only supported for connecting <code>required</code> to <code>provided</code> interfaces, the layout will be incorrect for all other uses. Also, do not use the <code>..&gt;</code> operator for this use case.</p></div><h4 id="further-connections" tabindex="-1">Further Connections <a class="header-anchor" href="#further-connections" aria-label="Permalink to “Further Connections”">​</a></h4><p>For additional connection types (associations, aggregations, etc.), refer to the <a href="./class.html">class diagram documentation</a>.</p><h2 id="config-properties" tabindex="-1">Config properties <a class="header-anchor" href="#config-properties" aria-label="Permalink to “Config properties”">​</a></h2><p>The following config properties are available for class diagrams:</p><table tabindex="0"><thead><tr><th>Variable</th><th>Meaning</th><th>Default value (in pixels)</th><th>Comment</th></tr></thead><tbody><tr><td><code>abstractAsProperty</code></td><td>Whether to show { abstract } after the name of abstract classes</td><td>false</td><td>-</td></tr><tr><td><code>providesDistance</code></td><td>Default distance of provided interfaces to the classifier outline</td><td>100</td><td>-</td></tr><tr><td><code>requiresDistance</code></td><td>Default distance of required interfaces to the classifier outline</td><td>100</td><td>-</td></tr></tbody></table>',6))])}const _=s(l,[["render",p]]);export{b as __pageData,_ as default};
